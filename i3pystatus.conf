from i3pystatus import Status
from i3pystatus.updates import pacman, cower

status = Status()

# Displays clock like this:
# Tue 30 Jul 11:59:46 PM KW31
#                          ^-- calendar week
status.register(
    "clock", format=" %H:%M:%S", color="#C678DD", interval=1,
)

status.register("clock", format="  %a %d-%m-%Y ", color="#61AEEE", interval=1, on_leftclick="/usr/bin/gsimplecal")

status.register(
    "updates",
    format="Updates: {count}",
    format_no_updates="",
    on_leftclick="termite --geometry=1200x600 --title=updates -e 'pacaur --needed --noconfirm --noedit -Syu'",
    backends=[pacman.Pacman(), cower.Cower()],
)

# Shows the average load of the last minute and the last 5 minutes
# (the default value for format is used)
status.register("load")

# status.register(
#     "cpu_usage", on_leftclick="termite --title=htop -e 'htop'", format="  {usage}%",
# )

status.register(
    "mem",
    color="#999999",
    warn_color="#E5E500",
    alert_color="#FF1919",
    format=" {avail_mem}/{total_mem} GB",
    divisor=1073741824,
)

# Shows your CPU temperature, if you have a Intel CPU
status.register(
    "temp", color="#78EAF2",
)
# The battery monitor has many formatting options, see README for details

# This would look like this, when discharging (or charging)
# ↓14.22W 56.15% [77.81%] 2h:41m
# And like this if full:
# =14.22W 100.0% [91.21%]
#
# This would also display a desktop notification (via D-Bus) if the percentage
# goes below 5 percent while discharging. The block will also color RED.
# If you don't have a desktop notification demon yet, take a look at dunst:
#   http://www.knopwob.org/dunst/
status.register(
    "battery",
    battery_ident="BAT0",
    interval=5,
    format="{status} {percentage:.0f}%",
    alert=True,
    alert_percentage=15,
    color="#FFFFFF",
    critical_color="#FF1919",
    charging_color="#E5E500",
    full_color="#D19A66",
    status={"DIS": " ", "CHR": "  ", "FULL": "   ",},
)
# This would look like this:
# Discharging 6h:51m
status.register(
    "battery",
    format="{status} {remaining:%E%hh:%Mm}",
    alert=True,
    alert_percentage=5,
    status={"DIS": "Discharging", "CHR": "Charging", "FULL": "Bat full",},
)

# Displays whether a DHCP client is running
status.register(
    "runwatch", name="DHCP", path="/var/run/dhclient*.pid",
)

# Shows the address and up/down state of eth0. If it is up the address is shown in
# green (the default value of color_up) and the CIDR-address is shown
# (i.e. 10.10.10.42/24).
# If it's down just the interface name (eth0) will be displayed in red
# (defaults of format_down and color_down)
#
# Note: the network module requires PyPI package netifaces
# status.register(
#     "network", interface="eth0", format_up="{v4cidr}",
# )

# Note: requires both netifaces and basiciw (for essid and quality)
status.register(
    "network", interface="wlp3s0", color_up="#8AE234", color_down="#EF2929", format_up="  {essid}  {kbs} kbs", format_down="",
)

# Shows disk usage of /
# Format:
# 42/128G [86G]
status.register(
    "disk", path="/", format="{used}/{total}G [{avail}G]",
)

# Shows pulseaudio default sink volume
#
# Note: requires libpulseaudio from PyPI
status.register(
    "pulseaudio", color_unmuted="#98C379", color_muted="#E06C75", format_muted=" [muted]", format=" {volume}%",
)

status.register(
    "backlight", interval=5, format=" {percentage:.0f}%", backlight="intel_backlight",
)

# Shows mpd status
# Format:
# Cloud connected▶Reroute to Remain
status.register(
    "mpd", format="{title}{status}{album}", status={"pause": "▷", "play": "▶", "stop": "◾",},
)


status.run()
